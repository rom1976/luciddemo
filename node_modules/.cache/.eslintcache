[{"/Users/romulaspaulm/react/luciddemo/src/index.js":"1","/Users/romulaspaulm/react/luciddemo/src/App.js":"2","/Users/romulaspaulm/react/luciddemo/src/reportWebVitals.js":"3","/Users/romulaspaulm/react/luciddemo/src/Login.js":"4","/Users/romulaspaulm/react/luciddemo/src/Count.js":"5"},{"size":500,"mtime":1632969696523,"results":"6","hashOfConfig":"7"},{"size":191,"mtime":1632998676589,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":6666,"mtime":1633014704015,"results":"10","hashOfConfig":"7"},{"size":285,"mtime":1633014401379,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uasr9d",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/romulaspaulm/react/luciddemo/src/index.js",[],"/Users/romulaspaulm/react/luciddemo/src/App.js",[],"/Users/romulaspaulm/react/luciddemo/src/reportWebVitals.js",[],"/Users/romulaspaulm/react/luciddemo/src/Login.js",["23","24","25","26","27","28"],"import { Button } from \"react-bootstrap\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect,useRef } from \"react\";\r\nimport ItemCount from \"./Count\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faEgg} from '@fortawesome/free-solid-svg-icons'\r\nimport { faSeedling } from '@fortawesome/free-solid-svg-icons'\r\nimport Count from \"./Count\";\r\n\r\n\r\nconst Login = () =>{\r\n \r\n     const [userID, setUserID] = useState('');\r\n     const [password, setPassword] = useState('');\r\n     const [userData, setUserData] = useState([]);\r\n     const [message, setMessage] = useState('');\r\n     const [loggedin, setLoggedIn] = useState(false);\r\n     const [menulist, setMenuList] = useState([]);\r\n     const [org,setOrg] = useState([]);\r\n     const [searchTerm,setSearchTerm] = useState('');\r\n     \r\n     \r\n     const menuRef = useRef([]);\r\n     let orderCount =0;\r\n\r\n\r\n     \r\n   \r\n    const submitHandler = () =>{\r\n       \r\n        axios.post('https://demo.lucidits.com/LUCIDAPI/V1/Login',{},{auth: {\r\n             \r\n              username: userID,\r\n              password: password\r\n            }})\r\n      .then((response)=>{ \r\n         \r\n          console.log(response.data);\r\n          setUserData(response.data);\r\n          if (userData.errorCode===1) throw (userData.message);\r\n\r\n          //console.log(userData);\r\n          setOrg(response.data.defaultPropertyName);\r\n          setMessage('Login Success');\r\n          sessionStorage.setItem('key', userData.lucidapiToken);\r\n          console.log(sessionStorage.getItem('key'));\r\n         \r\n        })\r\n        .catch((error)=>{\r\n            setMessage(userData.message);\r\n        })\r\n       \r\n }\r\n    \r\n\r\n     const LoginHandler = (e) =>{\r\n         setUserID(e.target.value);\r\n         console.log(userID);\r\n     }\r\n     \r\n\r\n     const LoginPasswordHandler =(e) =>{\r\n        setPassword(e.target.value);\r\n        console.log(password)\r\n     }\r\n  \r\n    \r\n    \r\n     useEffect(()=>{\r\n        if (userData.lucidapiToken)\r\n        setLoggedIn(true);\r\n        axios.get('https://demo.lucidits.com/LUCIDAPI/V1/GetOnlineOrderMenuItemListPageDetails',{\r\n            headers: { Authorization: `Bearer ${userData.lucidapiToken}` } })\r\n             .then((response)=>{\r\n                 setMenuList(response.data.response.menuItems)\r\n             }).then((Error)=> setMessage('Failed'));\r\n     },[loggedin,userData])\r\n\r\n     const mnItems = JSON.stringify(menulist);\r\n     const mnItemsObj =  JSON.parse(mnItems);\r\n     \r\n     let temp='';\r\n     \r\n      if (loggedin){\r\n          return(\r\n                <>\r\n                    <div className='container'>\r\n                    <div className ='row'>\r\n                        <h1>{org}</h1>\r\n                           <h1 className='mb-4' style={{textAlign:\"center\"}}>Menu Items List</h1>\r\n                              <div style={{height:'5rem', overflow:'hidden'}}>\r\n                                   <input type=\"text\" placeholder=\"seach...\" onChange={ e=>setSearchTerm(e.target.value)} />\r\n                              { \r\n                               mnItemsObj.map(a => a.itemName).filter((val) =>\r\n                                  {\r\n                                    if(searchTerm == \"\"){\r\n        \r\n                                       \r\n                                     return\r\n                                      }\r\n                                    else if(val.toLowerCase().includes(searchTerm.toLowerCase())){\r\n                                    return val;\r\n                                         }\r\n                                }).map((val,key)=>{\r\n                                    return <div>{val} </div>\r\n                                  })\r\n                                  \r\n                                  }\r\n                                </div> \r\n\r\n                            { mnItemsObj.map((a,id) => {\r\n                                return(\r\n                                    <div className='col mb-3' >\r\n                                <Card key ={id} border=\"primary\" style={{ width: '19rem', textAlign:\"center\" }}>\r\n                                <Card.Header key = {Math.random()} style = {{fontWeight:\"bold\"}}>  {a.itemName}</Card.Header>\r\n                                <Card.Body key = {Math.random()}>\r\n                                <Card.Title key = {Math.random()}> {a.itemRate}/- </Card.Title>\r\n                                <Card.Text key = {Math.random()}>\r\n                                \r\n                                {a.foodTypeName==='Veg' &&  <FontAwesomeIcon icon={faSeedling} size='2x' color='green' /> }\r\n                                {a.foodTypeName==='Non Veg' &&  <FontAwesomeIcon icon={faEgg} size='2x' color='yellow' /> }\r\n                                </Card.Text>\r\n                                {temp = a.itemName}\r\n                                <Count init={orderCount+=1}/>\r\n\r\n                              \r\n                                 </Card.Body>\r\n                             \r\n                               </Card>\r\n                               </div>\r\n                                )\r\n                              }\r\n                              )}\r\n                             \r\n                      </div>\r\n                                \r\n                       \r\n                    \r\n                               </div>\r\n                </>\r\n          )\r\n    \r\n      }else{\r\n    return(\r\n        <>\r\n           <div className='container'>\r\n           <h1>{org}</h1>\r\n               <div className='row'>\r\n                   <div className='col-md-4'></div>\r\n                   <div className='col-md-4'>\r\n                       <div>\r\n                           <h3>Login</h3>\r\n                           <label>\r\n                               User Name\r\n                           </label>\r\n                           <input type='text' name='loginName' placeholder='yourname' onChange={LoginHandler}/><br/>\r\n\r\n                           <label>\r\n                               Password\r\n                           </label>\r\n                           <input type ='password' name='loginPassword' placeholder='yourpassword' onChange={LoginPasswordHandler}/>\r\n                           <Button type=\"button\" className=\"btn btn-primary\" onClick={submitHandler}>Submit</Button>\r\n                       </div>\r\n                   </div>\r\n                   <div className='col-md-4'>\r\n                     <h2> {message} </h2>\r\n                   </div>\r\n               </div>\r\n\r\n           </div>\r\n            \r\n        </>\r\n    )\r\n      }\r\n\r\n}\r\n\r\nexport default Login;\r\n","/Users/romulaspaulm/react/luciddemo/src/Count.js",[],{"ruleId":"29","severity":1,"message":"30","line":5,"column":8,"nodeType":"31","messageId":"32","endLine":5,"endColumn":17},{"ruleId":"29","severity":1,"message":"33","line":24,"column":12,"nodeType":"31","messageId":"32","endLine":24,"endColumn":19},{"ruleId":"29","severity":1,"message":"34","line":83,"column":10,"nodeType":"31","messageId":"32","endLine":83,"endColumn":14},{"ruleId":"35","severity":1,"message":"36","line":95,"column":77,"nodeType":"37","messageId":"38","endLine":95,"endColumn":79},{"ruleId":"39","severity":1,"message":"40","line":97,"column":51,"nodeType":"41","messageId":"42","endLine":97,"endColumn":53},{"ruleId":"35","severity":1,"message":"43","line":100,"column":38,"nodeType":"44","messageId":"45","endLine":100,"endColumn":44},"no-unused-vars","'ItemCount' is defined but never used.","Identifier","unusedVar","'menuRef' is assigned a value but never used.","'temp' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue"]